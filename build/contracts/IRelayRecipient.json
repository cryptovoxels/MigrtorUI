{
  "contractName": "IRelayRecipient",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"notice\":\"a contract must implement this interface in order to support relayed transaction. It is better to inherit the BaseRelayRecipient as its implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":\"IRelayRecipient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92112fc87990f2d55c538946266c48f43e6ca442186ef3b8172eb4632deb0db3\",\"dweb:/ipfs/QmU6pqFXYT8fYfyhw7viRA775eBH4W7PAd589DVFGtSgxo\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal virtual view returns (bytes calldata);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n",
  "sourcePath": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol",
  "ast": {
    "absolutePath": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol",
    "exportedSymbols": {
      "IRelayRecipient": [
        766
      ]
    },
    "id": 767,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 739,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:5"
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "IRelayRecipient",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 740,
          "nodeType": "StructuredDocumentation",
          "src": "58:165:5",
          "text": " a contract must implement this interface in order to support relayed transaction.\n It is better to inherit the BaseRelayRecipient as its implementation."
        },
        "fullyImplemented": false,
        "id": 766,
        "linearizedBaseContracts": [
          766
        ],
        "name": "IRelayRecipient",
        "nameLocation": "242:15:5",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 741,
              "nodeType": "StructuredDocumentation",
              "src": "265:203:5",
              "text": " return if the forwarder is trusted to forward relayed transactions to us.\n the forwarder is required to verify the sender's signature, and verify\n the call is not a replay."
            },
            "functionSelector": "572b6c05",
            "id": 748,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isTrustedForwarder",
            "nameLocation": "482:18:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 744,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 743,
                  "mutability": "mutable",
                  "name": "forwarder",
                  "nameLocation": "509:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 748,
                  "src": "501:17:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 742,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "501:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "500:19:5"
            },
            "returnParameters": {
              "id": 747,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 746,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 748,
                  "src": "548:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 745,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "548:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "547:6:5"
            },
            "scope": 766,
            "src": "473:81:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 749,
              "nodeType": "StructuredDocumentation",
              "src": "560:290:5",
              "text": " return the sender of this call.\n if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n of the msg.data.\n otherwise, return `msg.sender`\n should be used in the contract anywhere instead of msg.sender"
            },
            "id": 754,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "864:10:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 750,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "874:2:5"
            },
            "returnParameters": {
              "id": 753,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 752,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 754,
                  "src": "908:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 751,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "908:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "907:9:5"
            },
            "scope": 766,
            "src": "855:62:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "documentation": {
              "id": 755,
              "nodeType": "StructuredDocumentation",
              "src": "923:421:5",
              "text": " return the msg.data of this call.\n if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n of the msg.data - so this method will strip those 20 bytes off.\n otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n should be used in the contract instead of msg.data, where this difference matters."
            },
            "id": 760,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_msgData",
            "nameLocation": "1358:8:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 756,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1366:2:5"
            },
            "returnParameters": {
              "id": 759,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 758,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 760,
                  "src": "1400:14:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 757,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1400:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1399:16:5"
            },
            "scope": 766,
            "src": "1349:67:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "functionSelector": "486ff0cd",
            "id": 765,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "versionRecipient",
            "nameLocation": "1431:16:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 761,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1447:2:5"
            },
            "returnParameters": {
              "id": 764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 763,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 765,
                  "src": "1481:13:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 762,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1481:6:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1480:15:5"
            },
            "scope": 766,
            "src": "1422:74:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 767,
        "src": "224:1274:5",
        "usedErrors": []
      }
    ],
    "src": "32:1467:5"
  },
  "legacyAST": {
    "absolutePath": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol",
    "exportedSymbols": {
      "IRelayRecipient": [
        766
      ]
    },
    "id": 767,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 739,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:5"
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "IRelayRecipient",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 740,
          "nodeType": "StructuredDocumentation",
          "src": "58:165:5",
          "text": " a contract must implement this interface in order to support relayed transaction.\n It is better to inherit the BaseRelayRecipient as its implementation."
        },
        "fullyImplemented": false,
        "id": 766,
        "linearizedBaseContracts": [
          766
        ],
        "name": "IRelayRecipient",
        "nameLocation": "242:15:5",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 741,
              "nodeType": "StructuredDocumentation",
              "src": "265:203:5",
              "text": " return if the forwarder is trusted to forward relayed transactions to us.\n the forwarder is required to verify the sender's signature, and verify\n the call is not a replay."
            },
            "functionSelector": "572b6c05",
            "id": 748,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isTrustedForwarder",
            "nameLocation": "482:18:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 744,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 743,
                  "mutability": "mutable",
                  "name": "forwarder",
                  "nameLocation": "509:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 748,
                  "src": "501:17:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 742,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "501:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "500:19:5"
            },
            "returnParameters": {
              "id": 747,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 746,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 748,
                  "src": "548:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 745,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "548:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "547:6:5"
            },
            "scope": 766,
            "src": "473:81:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 749,
              "nodeType": "StructuredDocumentation",
              "src": "560:290:5",
              "text": " return the sender of this call.\n if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n of the msg.data.\n otherwise, return `msg.sender`\n should be used in the contract anywhere instead of msg.sender"
            },
            "id": 754,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "864:10:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 750,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "874:2:5"
            },
            "returnParameters": {
              "id": 753,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 752,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 754,
                  "src": "908:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 751,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "908:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "907:9:5"
            },
            "scope": 766,
            "src": "855:62:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "documentation": {
              "id": 755,
              "nodeType": "StructuredDocumentation",
              "src": "923:421:5",
              "text": " return the msg.data of this call.\n if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n of the msg.data - so this method will strip those 20 bytes off.\n otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n should be used in the contract instead of msg.data, where this difference matters."
            },
            "id": 760,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_msgData",
            "nameLocation": "1358:8:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 756,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1366:2:5"
            },
            "returnParameters": {
              "id": 759,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 758,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 760,
                  "src": "1400:14:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 757,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1400:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1399:16:5"
            },
            "scope": 766,
            "src": "1349:67:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "functionSelector": "486ff0cd",
            "id": 765,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "versionRecipient",
            "nameLocation": "1431:16:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 761,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1447:2:5"
            },
            "returnParameters": {
              "id": 764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 763,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 765,
                  "src": "1481:13:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 762,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1481:6:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1480:15:5"
            },
            "scope": 766,
            "src": "1422:74:5",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 767,
        "src": "224:1274:5",
        "usedErrors": []
      }
    ],
    "src": "32:1467:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-06-13T00:30:36.320Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "notice": "a contract must implement this interface in order to support relayed transaction. It is better to inherit the BaseRelayRecipient as its implementation.",
    "version": 1
  }
}